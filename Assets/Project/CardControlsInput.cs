//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Project/CardControlsInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace IndustrialBuilder.Input
{
    public partial class @CardControlsInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CardControlsInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CardControlsInput"",
    ""maps"": [
        {
            ""name"": ""Card Controls"",
            ""id"": ""954c1b12-97ba-4537-91bf-07251e5b0b90"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""5075274a-5350-43cd-bc02-5dc5a3e7eb30"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""b225c7ef-5638-4370-a391-4cdf5113547b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c52ed0b8-fd57-4bd8-8f74-c11e840d9789"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse And Keyboard"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c13fc3e1-caab-4ddf-98fc-f30c293958c9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse And Keyboard"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse And Keyboard"",
            ""bindingGroup"": ""Mouse And Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Card Controls
            m_CardControls = asset.FindActionMap("Card Controls", throwIfNotFound: true);
            m_CardControls_MousePosition = m_CardControls.FindAction("MousePosition", throwIfNotFound: true);
            m_CardControls_LeftClick = m_CardControls.FindAction("LeftClick", throwIfNotFound: true);
        }

        ~@CardControlsInput()
        {
            UnityEngine.Debug.Assert(!m_CardControls.enabled, "This will cause a leak and performance issues, CardControlsInput.CardControls.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Card Controls
        private readonly InputActionMap m_CardControls;
        private List<ICardControlsActions> m_CardControlsActionsCallbackInterfaces = new List<ICardControlsActions>();
        private readonly InputAction m_CardControls_MousePosition;
        private readonly InputAction m_CardControls_LeftClick;
        public struct CardControlsActions
        {
            private @CardControlsInput m_Wrapper;
            public CardControlsActions(@CardControlsInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MousePosition => m_Wrapper.m_CardControls_MousePosition;
            public InputAction @LeftClick => m_Wrapper.m_CardControls_LeftClick;
            public InputActionMap Get() { return m_Wrapper.m_CardControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CardControlsActions set) { return set.Get(); }
            public void AddCallbacks(ICardControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_CardControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CardControlsActionsCallbackInterfaces.Add(instance);
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
            }

            private void UnregisterCallbacks(ICardControlsActions instance)
            {
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @LeftClick.started -= instance.OnLeftClick;
                @LeftClick.performed -= instance.OnLeftClick;
                @LeftClick.canceled -= instance.OnLeftClick;
            }

            public void RemoveCallbacks(ICardControlsActions instance)
            {
                if (m_Wrapper.m_CardControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICardControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_CardControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CardControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CardControlsActions @CardControls => new CardControlsActions(this);
        private int m_MouseAndKeyboardSchemeIndex = -1;
        public InputControlScheme MouseAndKeyboardScheme
        {
            get
            {
                if (m_MouseAndKeyboardSchemeIndex == -1) m_MouseAndKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse And Keyboard");
                return asset.controlSchemes[m_MouseAndKeyboardSchemeIndex];
            }
        }
        public interface ICardControlsActions
        {
            void OnMousePosition(InputAction.CallbackContext context);
            void OnLeftClick(InputAction.CallbackContext context);
        }
    }
}
